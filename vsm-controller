#!/bin/bash

TOPDIR=$(cd $(dirname "$0") && pwd)

cnt=`virsh list | wc -l`
if [[ $cnt -gt 19 ]]; then
    echo "There are 16 virtual machines."
    echo "You can not start more virtual machines."
    echo "Plz talk with you partner."
    exit 1
fi

if [[ $# -eq 0 ]]; then
    echo "There must be one parameters"
    exit 1
fi


set -e
set -o xtrace

[[ `dpkg -l kpartx | wc -l` -eq 0 ]] && apt-get install -y --force-yes kpartx lvm2 qemu-kvm qemu-utils
mkdir -p $1
cp _base/controller_node $1/$1
HOST_NAME=$1
uuid=`uuidgen`
sed -i "s,%UUID%,$uuid,g" $1/$1
sed -i "s,%VM_NAME%,$1,g" $1/$1

machine=`qemu-system-x86_64 -M ? | grep default | awk '{print $1}'`
sed -i "s,pc-0.14,$machine,g" $1/$1

# Main disk
qemu-img create -f qcow2 -o cluster_size=2M,backing_file=/cloud/_base/centos-6.5.raw $1/ubuntu-$1.qcow2 60G
sed -i "s,%IMAGE_PATH%,/cloud/$1/ubuntu-$1.qcow2,g" $1/$1
# Ceph disk
for n in 0 1 2 3 4 5 6 7 8 9 10; do
    qemu-img create -f raw $1/ceph-disk-$n.raw 10G
    sed -i "s,%DISK${n}%,/cloud/$1/ceph-disk-$n.raw,g" $1/$1
done

modprobe nbd  max_part=63

dev_number=1
qemu-nbd -c  /dev/nbd${dev_number} /cloud/$1/ubuntu-$1.qcow2
sleep 3
kpartx -a /dev/nbd${dev_number}
sleep 1
nbd_dev=`ls /dev/mapper | grep nbd${dev_number} | tail -1`
temp_file=`mktemp`; rm -rf $temp_file; mkdir -p $temp_file


# When mount close GUI directory
echo "Generate clean mount files to recover nbd devices."
cat <<"__EOF__"> $TOPDIR/clean
#!/bin/bash
if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
    ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
fi
__EOF__

# Generate clean script
echo "umount $temp_file" > $TOPDIR/clean
echo "qemu-nbd -d /dev/nbd${dev_number}" >> $TOPDIR/clean

cat <<"__EOF__" >> $TOPDIR/clean
for n in `ls /dev/mapper | grep -v control | grep -v nbd`; do
    dmsetup clear /dev/mapper/$n
    dmsetup remove /dev/mapper/$n
done

for n in `ls /dev/mapper | grep -v control | sort -r`; do
    dmsetup clear /dev/mapper/$n
    dmsetup remove /dev/mapper/$n
done

rmmod nbd
__EOF__
chmod +x $TOPDIR/clean

sleep 1

for root_path in `ls /dev/mapper | grep -v nbd | grep -v control`; do
    mount /dev/mapper/$root_path $temp_file
    if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
        ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
    fi
    sleep 1
    if [[ `ls $temp_file | grep root | wc -l` -gt 0 ]]; then
        umount $temp_file
        break;
    fi
    umount $temp_file
done
mount /dev/mapper/$root_path $temp_file
if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
    ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
fi

echo $temp_file
ls $temp_file
# Change network configuration.
#----------------------------------------------

rm -rf $temp_file/etc/yum.repos.d/CentOS-c*.repo
rm -rf $temp_file/etc/yum.repos.d/CentOS-CD*.repo
sed -i "s,cd-all,total,g" $temp_file/etc/yum.repos.d/CentOS-ALL.repo
sed -i "s,200,94,g" $temp_file/etc/yum.repos.d/CentOS-ALL.repo

mip=`hostname -I | awk '{print $2}'`
sed -i "s,%MY_IP%,$mip,g" /cloud/client
cp -rf /cloud/client $temp_file/root/
cp -rf /cloud/keys/* $temp_file/root/

echo "touch /var/lock/subsys/local" > $temp_file/etc/rc.local
#echo "route add default gw 10.239.82.1 eth0" >> $temp_file/etc/rc.local
echo "service iptables stop" >> $temp_file/etc/rc.local
echo "/root/client" >>  $temp_file/etc/rc.local

file=$temp_file/etc/udev/rules.d/70-persistent-net.rules
cat <<"EOF" >$temp_file/etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.
# PCI device 0x10ec:0x8139 (8139cp)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC_BR0%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC1%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC2%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth2"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC3%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth3"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC4%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth4"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC5%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth5"
EOF

file=$temp_file/etc/selinux/config
sed -i "s,enforcing,disabled,g" $file

rm -rf $temp_file/root/.ssh/kn*

for n in `find /home -name "id_rsa.pub"`; do
    cat $n >> $temp_file/root/.ssh/authorized_keys
done

MACADDR="52:54:$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')";
sed -i "s,%MAC_BR0%,$MACADDR,g" $1/$1
sed -i "s,%MAC_BR0%,$MACADDR,g" $temp_file/etc/udev/rules.d/70-persistent-net.rules

iffile=$temp_file/etc/sysconfig/network-scripts/ifcfg-eth0
cat <<"EOF">$iffile
DEVICE=eth0
BOOTPROTO="dhcp"
HWADDR="%MAC_BR0%"
NM_CONTROLLED="no"
ONBOOT="yes"
TYPE="Ethernet"
IPV6INIT=no
IPV6_AUTOCONF=no
EOF
sed -i "s,%MAC_BR0%,$MACADDR,g" $iffile


for n in 1 2 3 4 5; do
    MACADDR="52:54:$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')";
    sed -i "s,%MAC${n}%,$MACADDR,g" $1/$1
    sed -i "s,%MAC${n}%,$MACADDR,g" $temp_file/etc/udev/rules.d/70-persistent-net.rules


iffile=$temp_file/etc/sysconfig/network-scripts/ifcfg-eth$n
cat <<"EOF">$iffile
DEVICE="%ETH%"

BOOTPROTO="dhcp"
BROADCAST=192.168.%LAN%.255
NETMASK=255.255.255.0
NETWORK=192.168.%LAN%.0
GATEWAY=192.168.%LAN%.1

HWADDR="%MAC%"
NM_CONTROLLED="no"
ONBOOT="yes"
TYPE="Ethernet"
IPV6INIT=no
IPV6_AUTOCONF=no
EOF
sed -i "s,%ETH%,eth$n,g" $iffile
sed -i "s,%MAC%,$MACADDR,g" $iffile
let LAN=n+1
sed -i "s,%LAN%,12$LAN,g" $iffile
done


# Change hostname to $1
cat <<"EOF" > $temp_file/etc/sysconfig/network
NETWORKING=yes
NETWORKING_IPV6=no
EOF
echo "HOSTNAME=$1" >> $temp_file/etc/sysconfig/network

cat <<"EOF" > $temp_file/etc/hosts
127.0.0.1   %HOST_NAME% localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         %HOST_NAME% localhost localhost.localdomain localhost6 localhost6.localdomain6
10.239.82.94 aserver1
EOF

sed -i "s,%HOST_NAME%,$HOST_NAME,g"  $temp_file/etc/hosts


#----------------------------------------------
if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
    ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
fi
umount $temp_file
qemu-nbd -d /dev/nbd${dev_number}

for n in `ls /dev/mapper | grep -v control | grep -v nbd`; do
    dmsetup clear /dev/mapper/$n
    dmsetup remove /dev/mapper/$n
done

for n in `ls /dev/mapper | grep -v control | sort -r`; do
    dmsetup clear /dev/mapper/$n
    dmsetup remove /dev/mapper/$n
done

rmmod nbd

virsh define $1/$1
virsh start $1
mip=10.239.82.94
pt=`virsh vncdisplay $1`
echo $mip:$pt


set +o xtrace

