#!/bin/bash

TOPDIR=$(cd $(dirname "$0") && pwd)
temp_file=`mktemp`; rm -rf $temp_file; mkdir -p $temp_file

cnt=`virsh list | wc -l`
if [[ $cnt -gt 19 ]]; then
    echo "There are 16 virtual machines."
    echo "You can not start more virtual machines."
    echo "Plz talk with you partner."
    exit 1
fi

if [[ $# -eq 0 ]]; then
    echo "There must be one parameters"
    exit 1
fi


set -e
set -o xtrace

[[ `dpkg -l kpartx | wc -l` -eq 0 ]] && apt-get install -y --force-yes kpartx lvm2 qemu-kvm qemu-utils libguestfs-tools
mkdir -p $1
cp _base/centos $1/$1
HOST_NAME=$1
uuid=`uuidgen`
sed -i "s,%UUID%,$uuid,g" $1/$1
sed -i "s,%VM_NAME%,$1,g" $1/$1

machine=`qemu-system-x86_64 -M ? | grep default | awk '{print $1}'`
sed -i "s,pc-0.14,$machine,g" $1/$1

# Main disk
qemu-img create -f qcow2 -o cluster_size=2M,backing_file=/cloud/_base/ubuntu-12.04.raw $1/ubuntu-$1.qcow2 60G
sed -i "s,%IMAGE_PATH%,/cloud/$1/ubuntu-$1.qcow2,g" $1/$1
# Ceph disk
for n in 0 1 2 3 4 5 6 7 8 9 10; do
    qemu-img create -f raw $1/ceph-disk-$n.raw 10G
    sed -i "s,%DISK${n}%,/cloud/$1/ceph-disk-$n.raw,g" $1/$1
done

guestmount -a /cloud/$1/ubuntu-$1.qcow2 -i $temp_file

if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
    ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
fi

echo $temp_file
ls $temp_file

# Change network configuration.
#----------------------------------------------
mip="192.168.122.1"
sed -i "s,%MY_IP%,$mip,g" /cloud/client
cp -rf /cloud/client $temp_file/root/
cp -rf /cloud/keys/* $temp_file/root/
echo "/root/client" >>  $temp_file/etc/rc.local

file=$temp_file/etc/udev/rules.d/70-persistent-net.rules
cat <<"EOF" >$temp_file/etc/udev/rules.d/70-persistent-net.rules
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.
# PCI device 0x10ec:0x8139 (8139cp)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC0%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC1%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC2%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth2"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC3%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth3"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC4%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth4"
EOF

mkdir -p $temp_file/root/.ssh
for n in `find /home -name "id_rsa.pub"`; do
    cat $n >> $temp_file/root/.ssh/authorized_keys
done


network_file=$temp_file/etc/network/interfaces
cat <<"eof" > $network_file
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback
eof

for n in 0 1 2 3 4; do
    MACADDR="52:54:$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')";
    sed -i "s,%MAC${n}%,$MACADDR,g" $1/$1
    sed -i "s,%MAC${n}%,$MACADDR,g" $temp_file/etc/udev/rules.d/70-persistent-net.rules


cat <<"EOF">>$network_file
auto %ETH%
iface %ETH% inet dhcp
    broadcast 192.168.%LAN%.255
    netmask 255.255.255.0
    gateway 192.168.%LAN%.1
EOF
sed -i "s,%ETH%,eth$n,g" $network_file
let LAN=n+2
sed -i "s,%LAN%,12$LAN,g" $network_file
done

cat <<"EOF" > $temp_file/etc/hosts
127.0.0.1   %HOST_NAME% localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         %HOST_NAME% localhost localhost.localdomain localhost6 localhost6.localdomain6
EOF

sed -i "s,%HOST_NAME%,$HOST_NAME,g"  $temp_file/etc/hosts


#----------------------------------------------
if [[ `ps aux | grep nautilus | grep -v grep | awk '{print $2}'` -gt 0 ]]; then
    ps aux | grep nautilus | grep -v grep | awk '{print $2}' | xargs -i kill -9 {}
fi
umount $temp_file
virsh define $1/$1
virsh start $1

set +o xtrace

